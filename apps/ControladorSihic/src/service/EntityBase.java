package service;
import java.io.Serializable;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import service.EntityManagerGeneric;

public abstract class EntityBase implements Serializable {
}
/*@Id
@Column(columnDefinition = "BINARY(16)", length = 16, updatable = false, nullable = false)
public UUID getId() {
    ensureId();
    return id;
}

@Version
private Long version;

public Long getVersion() {
    return version;
}

public void setVersion(Long version) {
    this.version = version;
}

@Override
public boolean equals(Object o) {
    // generated by IDEA
    if (this == o)
        return true;
    if (!(o instanceof EntityBase))
        return false;
    EntityBase that = (EntityBase) o;
    return id.equals(that.id);
}

@Override
public int hashCode() {
    ensureId();
    return id.hashCode();
}

// JPA
protected EntityBase() {
}

protected void setId(UUID id) {
    this.id = id;
}

private void ensureId() {
    if (id == null)
        id = UUID.randomUUID();
}

private UUID id;
}




@Entity
@Table(name = "listing", uniqueConstraints = { 
    @UniqueConstraint(columnNames = { "base", "quote",     "prompt" }),
    @UniqueConstraint(columnNames = { "base", "quote" }) })
public class Listing extends EntityBase {

@ManyToOne(optional = false)
//@Column(unique = true)
public Asset getBase() {
    return base;
}

@PostPersist
private void postPersist() {
    //  PersistUtil.clear();
    //  PersistUtil.refresh(this);
    //PersistUtil.merge(this);
    // PersistUtil.close();
    //PersistUtil.evict(this);

}

@ManyToOne(optional = false)
//@Column(unique = true)
public Asset getQuote() {
    return quote;
}

@Nullable
//@Column(unique = true)
public String getPrompt() {
    return prompt;
}

@Override
public boolean equals(Object obj) {
    if (obj instanceof Listing) {
        Listing listing = (Listing) obj;

        if (!listing.getBase().equals(getBase())) {
            return false;
        }

        if (!listing.getQuote().equals(getQuote())) {
            return false;
        }

        return true;
    }

    return false;
}

@Override
public int hashCode() {
    return getQuote().hashCode() + getBase().hashCode();
}


public class DatabaseWriter implements Runnable {
private static final int defaultBatchSize = 20;
private static boolean running = false;
private static boolean shutdown = false;
private static ExecutorService service;
private static FutureTask persitanceTask = null;

 private static BlockingQueue<EntityBase[]> blockingQueue;

 public DatabaseWriter(BlockingQueue<EntityBase[]> blockingqueue) {
    this.blockingQueue = blockingqueue;
}

@Override
public void run() {
    EntityBase[] entities = null;
    boolean persited = true;
    while (!shutdown) {

        try {
            entities = blockingQueue.take();
            for (EntityBase entity : entities)
                EntityManagerGeneric.persist(entity);
        }

        catch (Exception e) {

        } finally {
        }

    }
    EntityManagerGeneric.closeEntityManager();

}
}
}

*/